"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { 
  Camera, 
  Upload, 
  Leaf, 
  Heart, 
  ArrowLeft,
  CheckCircle,
  AlertCircle
} from "lucide-react";
import Link from "next/link";

interface PlantFormData {
  plantName: string;
  plantType: string;
  condition: string;
  size: string;
  age: string;
  reason: string;
  desiredPrice: string;
  location: string;
  contactPhone: string;
  contactLine: string;
  photos: File[];
}

export default function GivePlantPage() {
  const [formData, setFormData] = useState<PlantFormData>({
    plantName: "",
    plantType: "",
    condition: "",
    size: "",
    age: "",
    reason: "",
    desiredPrice: "",
    location: "",
    contactPhone: "",
    contactLine: "",
    photos: []
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const plantTypes = [
    "‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏£‡πà‡∏°",
    "‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á", 
    "‡πÑ‡∏°‡πâ‡∏î‡∏≠‡∏Å",
    "‡πÑ‡∏°‡πâ‡πÉ‡∏ö",
    "‡πÑ‡∏°‡πâ‡∏ú‡∏•",
    "‡πÅ‡∏Ñ‡∏Ñ‡∏ï‡∏±‡∏™/‡πÑ‡∏°‡πâ‡∏≠‡∏ß‡∏ö‡∏ô‡πâ‡∏≥",
    "‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã",
    "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
  ];

  const conditions = [
    "‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏°‡∏≤‡∏Å",
    "‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå",
    "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
    "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•",
    "‡∏õ‡πà‡∏ß‡∏¢/‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
  ];

  const sizes = [
    "‡πÄ‡∏•‡πá‡∏Å (‡∏™‡∏π‡∏á < 30cm)",
    "‡∏Å‡∏•‡∏≤‡∏á (‡∏™‡∏π‡∏á 30-100cm)",
    "‡πÉ‡∏´‡∏ç‡πà (‡∏™‡∏π‡∏á 100-200cm)",
    "‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å (‡∏™‡∏π‡∏á > 200cm)"
  ];

  const handleInputChange = (field: keyof PlantFormData, value: string | File[]) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handlePhotoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || []);
    if (files.length > 0) {
      setFormData(prev => ({
        ...prev,
        photos: [...prev.photos, ...files].slice(0, 5) // Max 5 photos
      }));
    }
  };

  const removePhoto = (index: number) => {
    setFormData(prev => ({
      ...prev,
      photos: prev.photos.filter((_, i) => i !== index)
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError(null);

    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Success
      setIsSubmitted(true);
    } catch (err) {
      setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
    } finally {
      setIsSubmitting(false);
    }
  };

  if (isSubmitted) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 py-20">
        <div className="max-w-2xl mx-auto px-4 text-center">
          <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <CheckCircle className="h-10 w-10 text-green-600" />
          </div>
          <h1 className="text-3xl font-bold text-gray-900 mb-4">
            ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ
          </h1>
          <p className="text-lg text-gray-600 mb-8">
            ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
          </p>
          <div className="space-y-4">
            <Link href="/give-plant">
              <Button size="lg" className="bg-green-600 hover:bg-green-700">
                ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏≠‡∏µ‡∏Å‡∏ï‡πâ‡∏ô
              </Button>
            </Link>
            <div>
              <Link href="/">
                <Button variant="outline" className="w-full">
                  <ArrowLeft className="mr-2 h-4 w-4" />
                  ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 py-8">
      <div className="max-w-4xl mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <Link href="/" className="inline-flex items-center text-green-600 hover:text-green-700 mb-4">
            <ArrowLeft className="mr-2 h-4 w-4" />
            ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
          </Link>
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
          </h1>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            ‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô
          </p>
        </div>

        {/* Form */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Leaf className="h-6 w-6 text-green-600" />
              ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
            </CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Basic Info */}
              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ *
                  </label>
                  <Input
                    required
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô Monstera, Fiddle Leaf Fig"
                    value={formData.plantName}
                    onChange={(e) => handleInputChange("plantName", e.target.value)}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ *
                  </label>
                  <Select value={formData.plantType} onValueChange={(value) => handleInputChange("plantType", value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ" />
                    </SelectTrigger>
                    <SelectContent>
                      {plantTypes.map((type) => (
                        <SelectItem key={type} value={type}>
                          {type}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid md:grid-cols-3 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡∏™‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ *
                  </label>
                  <Select value={formData.condition} onValueChange={(value) => handleInputChange("condition", value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏†‡∏≤‡∏û" />
                    </SelectTrigger>
                    <SelectContent>
                      {conditions.map((condition) => (
                        <SelectItem key={condition} value={condition}>
                          {condition}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡∏Ç‡∏ô‡∏≤‡∏î *
                  </label>
                  <Select value={formData.size} onValueChange={(value) => handleInputChange("size", value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î" />
                    </SelectTrigger>
                    <SelectContent>
                      {sizes.map((size) => (
                        <SelectItem key={size} value={size}>
                          {size}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
                  </label>
                  <Input
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô 2 ‡∏õ‡∏µ, 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
                    value={formData.age}
                    onChange={(e) => handleInputChange("age", e.target.value)}
                  />
                </div>
              </div>

              {/* Reason */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ *
                </label>
                <Textarea
                  required
                  placeholder="‡∏ö‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ ‡πÄ‡∏ä‡πà‡∏ô ‡∏¢‡πâ‡∏≤‡∏¢‡∏ö‡πâ‡∏≤‡∏ô, ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÇ‡∏ï‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ, ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏π‡πÅ‡∏•"
                  rows={3}
                  value={formData.reason}
                  onChange={(e) => handleInputChange("reason", e.target.value)}
                />
              </div>

              {/* Price & Location */}
              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏ö‡∏≤‡∏ó)
                  </label>
                  <Input
                    type="number"
                    placeholder="0 (‡πÉ‡∏´‡πâ‡∏ü‡∏£‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"
                    value={formData.desiredPrice}
                    onChange={(e) => handleInputChange("desiredPrice", e.target.value)}
                  />
                  <p className="text-sm text-gray-500 mt-1">
                    ‡πÉ‡∏™‡πà 0 ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ü‡∏£‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                  </p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î) *
                  </label>
                  <Input
                    required
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø, ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà, ‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï"
                    value={formData.location}
                    onChange={(e) => handleInputChange("location", e.target.value)}
                  />
                </div>
              </div>

              {/* Contact Info */}
              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
                  </label>
                  <Input
                    type="tel"
                    placeholder="081-234-5678"
                    value={formData.contactPhone}
                    onChange={(e) => handleInputChange("contactPhone", e.target.value)}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Line ID
                  </label>
                  <Input
                    placeholder="line_id"
                    value={formData.contactLine}
                    onChange={(e) => handleInputChange("contactLine", e.target.value)}
                  />
                </div>
              </div>

              {/* Photo Upload */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ *
                </label>
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                  <Camera className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <div className="mb-4">
                    <label htmlFor="photo-upload" className="cursor-pointer">
                      <Button type="button" variant="outline" className="bg-white">
                        <Upload className="mr-2 h-4 w-4" />
                        ‡∏≠‡∏±‡∏û‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                      </Button>
                    </label>
                    <input
                      id="photo-upload"
                      type="file"
                      multiple
                      accept="image/*"
                      onChange={handlePhotoUpload}
                      className="hidden"
                    />
                  </div>
                  <p className="text-sm text-gray-500">
                    ‡∏≠‡∏±‡∏û‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏π‡∏õ ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏£‡∏π‡∏õ
                  </p>
                </div>

                {/* Photo Preview */}
                {formData.photos.length > 0 && (
                  <div className="mt-4">
                    <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                      {formData.photos.map((photo, index) => (
                        <div key={index} className="relative">
                          <img
                            src={URL.createObjectURL(photo)}
                            alt={`Photo ${index + 1}`}
                            className="w-full h-24 object-cover rounded-lg"
                          />
                          <button
                            type="button"
                            onClick={() => removePhoto(index)}
                            className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm hover:bg-red-600"
                          >
                            √ó
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>

              {/* Error Alert */}
              {error && (
                <Alert variant="destructive">
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}

              {/* Submit Button */}
              <div className="pt-4">
                <Button
                  type="submit"
                  size="lg"
                  className="w-full bg-green-600 hover:bg-green-700 text-white py-3 text-lg"
                  disabled={isSubmitting || formData.photos.length === 0}
                >
                  {isSubmitting ? (
                    <>
                      <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                      ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...
                    </>
                  ) : (
                    <>
                      <Heart className="mr-2 h-5 w-5" />
                      ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
                    </>
                  )}
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>

        {/* Tips */}
        <Card className="bg-blue-50 border-blue-200">
          <CardHeader>
            <CardTitle className="text-blue-800 flex items-center gap-2">
              <AlertCircle className="h-5 w-5" />
              ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
            </CardTitle>
          </CardHeader>
          <CardContent className="text-blue-700">
            <ul className="space-y-2 text-sm">
              <li>‚Ä¢ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô</li>
              <li>‚Ä¢ ‡∏ö‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à</li>
              <li>‚Ä¢ ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ</li>
              <li>‚Ä¢ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏´‡πâ‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö</li>
            </ul>
          </CardContent>
        </Card>
      </div>
    </div>
  );
} 