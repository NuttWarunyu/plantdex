#!/usr/bin/env python3
"""
Add detailed sample data to PlantDex
‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.core.database import SessionLocal
from app.models.plant_detailed import *
from app.models.plant import Plant
from app.models.user import User, Seller
from datetime import datetime, date
import json

def add_plant_images():
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏û‡∏∑‡∏ä"""
    print("üñºÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏û‡∏∑‡∏ä...")
    
    db = SessionLocal()
    try:
        # ‡∏´‡∏≤‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        plants = db.query(Plant).all()
        if not plants:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡∏ä")
            return
        
        # ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡∏ä‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î
        plant_images_data = [
            # Monstera deliciosa
            {
                "plant_id": 1,
                "images": [
                    {"type": "main", "url": "https://images.unsplash.com/photo-1593691509543-c55fb32e5cee", "alt": "Monstera deliciosa ‡πÉ‡∏ö‡πÉ‡∏´‡∏ç‡πà", "order": 1, "is_primary": True},
                    {"type": "gallery", "url": "https://images.unsplash.com/photo-1593691509543-c55fb32e5cee", "alt": "Monstera ‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ñ‡∏≤‡∏á", "order": 2, "is_primary": False},
                    {"type": "care_guide", "url": "https://images.unsplash.com/photo-1593691509543-c55fb32e5cee", "alt": "‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏• Monstera", "order": 3, "is_primary": False}
                ]
            },
            # Philodendron Pink Princess
            {
                "plant_id": 4,
                "images": [
                    {"type": "main", "url": "https://images.unsplash.com/photo-1593691509543-c55fb32e5cee", "alt": "Philodendron Pink Princess", "order": 1, "is_primary": True},
                    {"type": "gallery", "url": "https://images.unsplash.com/photo-1593691509543-c55fb32e5cee", "alt": "‡πÉ‡∏ö‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π", "order": 2, "is_primary": False}
                ]
            }
        ]
        
        for plant_data in plant_images_data:
            plant_id = plant_data["plant_id"]
            for img_data in plant_data["images"]:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                existing = db.query(PlantImage).filter(
                    PlantImage.plant_id == plant_id,
                    PlantImage.image_url == img_data["url"]
                ).first()
                
                if not existing:
                    plant_image = PlantImage(
                        plant_id=plant_id,
                        image_type=img_data["type"],
                        image_url=img_data["url"],
                        image_alt=img_data["alt"],
                        image_order=img_data["order"],
                        is_primary=img_data["is_primary"]
                    )
                    db.add(plant_image)
        
        db.commit()
        print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏û‡∏∑‡∏ä‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        db.rollback()
    finally:
        db.close()

def add_plant_propagations():
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå"""
    print("üå± ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå...")
    
    db = SessionLocal()
    try:
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå
        propagation_data = [
            {
                "plant_id": 1,  # Monstera
                "method": PropagationMethod.CUTTING,
                "difficulty": DifficultyLevel.EASY,
                "success_rate": 85.0,
                "time_to_root": 21,
                "best_season": "‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô",
                "instructions": "‡∏ï‡∏±‡∏î‡∏Å‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ö 2-3 ‡πÉ‡∏ö ‡∏ß‡∏≤‡∏á‡πÉ‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏¥‡∏ô‡∏ä‡∏∑‡πâ‡∏ô",
                "tools_needed": "‡∏Å‡∏£‡∏£‡πÑ‡∏Å‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏¥‡πà‡∏á, ‡∏Å‡∏£‡∏∞‡∏ñ‡∏≤‡∏á, ‡∏î‡∏¥‡∏ô‡∏õ‡∏•‡∏π‡∏Å"
            },
            {
                "plant_id": 4,  # Philodendron Pink Princess
                "method": PropagationMethod.AIR_LAYERING,
                "difficulty": DifficultyLevel.MODERATE,
                "success_rate": 70.0,
                "time_to_root": 45,
                "best_season": "‡∏§‡∏î‡∏π‡∏ù‡∏ô",
                "instructions": "‡∏´‡πà‡∏≠‡∏Å‡∏¥‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏≠‡∏™‡∏ä‡∏∑‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å",
                "tools_needed": "‡∏°‡∏≠‡∏™, ‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡∏´‡πà‡∏≠, ‡πÄ‡∏ä‡∏∑‡∏≠‡∏Å"
            }
        ]
        
        for data in propagation_data:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            existing = db.query(PlantPropagation).filter(
                PlantPropagation.plant_id == data["plant_id"],
                PlantPropagation.method == data["method"]
            ).first()
            
            if not existing:
                propagation = PlantPropagation(**data)
                db.add(propagation)
        
        db.commit()
        print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        db.rollback()
    finally:
        db.close()

def add_plant_pest_diseases():
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡∏•‡∏á"""
    print("üêõ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡∏•‡∏á...")
    
    db = SessionLocal()
    try:
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡∏•‡∏á
        pest_disease_data = [
            {
                "plant_id": 1,  # Monstera
                "pest_or_disease": "‡πÑ‡∏£‡πÅ‡∏°‡∏á‡∏°‡∏∏‡∏°",
                "type": "pest",
                "symptoms": "‡πÉ‡∏ö‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á ‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• ‡πÉ‡∏¢‡∏ö‡∏≤‡∏á‡πÜ ‡∏ö‡∏ô‡πÉ‡∏ö",
                "prevention": "‡∏â‡∏µ‡∏î‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥ ‡πÉ‡∏ä‡πâ‡∏™‡∏ö‡∏π‡πà‡∏Ü‡πà‡∏≤‡πÅ‡∏°‡∏•‡∏á",
                "treatment": "‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡∏Ü‡πà‡∏≤‡πÑ‡∏£ ‡∏â‡∏µ‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏£‡∏á‡πÜ",
                "severity": "medium",
                "season_risk": "‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô-‡∏§‡∏î‡∏π‡∏ù‡∏ô"
            },
            {
                "plant_id": 1,  # Monstera
                "pest_or_disease": "‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡∏Å‡πÄ‡∏ô‡πà‡∏≤",
                "type": "disease",
                "symptoms": "‡πÉ‡∏ö‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á ‡∏£‡∏≤‡∏Å‡∏î‡∏≥ ‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡πÄ‡∏´‡∏°‡πá‡∏ô",
                "prevention": "‡∏£‡∏î‡∏ô‡πâ‡∏≥‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏î‡∏¥‡∏ô‡πÅ‡∏â‡∏∞ ‡πÉ‡∏ä‡πâ‡∏î‡∏¥‡∏ô‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏î‡∏µ",
                "treatment": "‡∏ï‡∏±‡∏î‡∏£‡∏≤‡∏Å‡πÄ‡∏ô‡πà‡∏≤ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏î‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà",
                "severity": "high",
                "season_risk": "‡∏§‡∏î‡∏π‡∏ù‡∏ô"
            }
        ]
        
        for data in pest_disease_data:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            existing = db.query(PlantPestDisease).filter(
                PlantPestDisease.plant_id == data["plant_id"],
                PlantPestDisease.pest_or_disease == data["pest_or_disease"]
            ).first()
            
            if not existing:
                pest_disease = PlantPestDisease(**data)
                db.add(pest_disease)
        
        db.commit()
        print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡∏•‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        db.rollback()
    finally:
        db.close()

def add_plant_seasonal_infos():
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•"""
    print("üå¶Ô∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•...")
    
    db = SessionLocal()
    try:
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•
        seasonal_data = [
            {
                "plant_id": 1,  # Monstera
                "best_planting_season": ["spring", "summer"],
                "blooming_season": ["summer"],
                "dormancy_period": ["winter"],
                "seasonal_care": "‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏°‡∏≤‡∏Å ‡∏§‡∏î‡∏π‡∏´‡∏ô‡∏≤‡∏ß‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ô‡πâ‡∏≠‡∏¢",
                "seasonal_watering": "‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô: 2-3 ‡∏ß‡∏±‡∏ô/‡∏Ñ‡∏£‡∏±‡πâ‡∏á, ‡∏§‡∏î‡∏π‡∏´‡∏ô‡∏≤‡∏ß: 7-10 ‡∏ß‡∏±‡∏ô/‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                "seasonal_fertilizing": "‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô: ‡∏ó‡∏∏‡∏Å 2 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå, ‡∏§‡∏î‡∏π‡∏´‡∏ô‡∏≤‡∏ß: ‡∏´‡∏¢‡∏∏‡∏î‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πã‡∏¢"
            },
            {
                "plant_id": 4,  # Philodendron Pink Princess
                "best_planting_season": ["spring", "summer"],
                "blooming_season": ["spring", "summer"],
                "dormancy_period": ["winter"],
                "seasonal_care": "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏π‡∏á‡πÉ‡∏ô‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô",
                "seasonal_watering": "‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô: ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô, ‡∏§‡∏î‡∏π‡∏´‡∏ô‡∏≤‡∏ß: 3-5 ‡∏ß‡∏±‡∏ô/‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                "seasonal_fertilizing": "‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô: ‡∏ó‡∏∏‡∏Å‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå, ‡∏§‡∏î‡∏π‡∏´‡∏ô‡∏≤‡∏ß: ‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
            }
        ]
        
        for data in seasonal_data:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            existing = db.query(PlantSeasonalInfo).filter(
                PlantSeasonalInfo.plant_id == data["plant_id"]
            ).first()
            
            if not existing:
                seasonal_info = PlantSeasonalInfo(**data)
                db.add(seasonal_info)
        
        db.commit()
        print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        db.rollback()
    finally:
        db.close()

def add_plant_shipping_infos():
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á"""
    print("üì¶ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á...")
    
    db = SessionLocal()
    try:
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á
        shipping_data = [
            {
                "plant_id": 1,  # Monstera
                "fragility_level": "medium",
                "packaging_requirements": "‡∏´‡πà‡∏≠‡πÉ‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏© ‡πÉ‡∏™‡πà‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏Ç‡πá‡∏á",
                "max_shipping_distance": 500,
                "shipping_preparation": "‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏±‡∏î‡∏™‡πà‡∏á 1 ‡∏ß‡∏±‡∏ô",
                "special_handling": "‡∏´‡πâ‡∏≤‡∏°‡∏ß‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡πà‡∏≥",
                "temperature_control": False,
                "humidity_control": True
            },
            {
                "plant_id": 4,  # Philodendron Pink Princess
                "fragility_level": "high",
                "packaging_requirements": "‡∏´‡πà‡∏≠‡πÉ‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏ä‡∏∏‡πà‡∏°‡∏ô‡πâ‡∏≥ ‡πÉ‡∏™‡πà‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏Ç‡πá‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©",
                "max_shipping_distance": 300,
                "shipping_preparation": "‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏±‡∏î‡∏™‡πà‡∏á 2 ‡∏ß‡∏±‡∏ô",
                "special_handling": "‡∏´‡πâ‡∏≤‡∏°‡∏ß‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡πà‡∏≥ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î",
                "temperature_control": True,
                "humidity_control": True
            }
        ]
        
        for data in shipping_data:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            existing = db.query(PlantShippingInfo).filter(
                PlantShippingInfo.plant_id == data["plant_id"]
            ).first()
            
            if not existing:
                shipping_info = PlantShippingInfo(**data)
                db.add(shipping_info)
        
        db.commit()
        print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        db.rollback()
    finally:
        db.close()

def add_plant_prices_detailed():
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
    print("üí∞ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î...")
    
    db = SessionLocal()
    try:
        # ‡∏´‡∏≤‡∏û‡∏∑‡∏ä‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        plants = db.query(Plant).all()
        sellers = db.query(Seller).all()
        
        if not plants or not sellers:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡∏ä‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢")
            return
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        price_data = [
            {
                "plant_id": 1,  # Monstera
                "seller_id": 1,  # Plant Collector Thailand
                "base_price": 2500.0,
                "currency": "THB",
                "price_type": "fixed",
                "height": 80.0,
                "width": 60.0,
                "pot_size": "6inch",
                "leaf_count": 8,
                "maturity_level": "juvenile",
                "quality_grade": QualityGrade.A,
                "variegation_level": VariegationLevel.NONE,
                "health_score": 95.0,
                "seasonal_multiplier": 1.2,
                "peak_season": ["spring", "summer"],
                "off_season": ["winter"],
                "province": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
                "city": "‡∏ö‡∏≤‡∏á‡∏ô‡∏≤",
                "local_market_factor": 1.1,
                "platform": "facebook",
                "seller_type": "nursery",
                "verification_status": "verified",
                "rating": 4.8,
                "review_count": 156,
                "shipping_cost": 150.0,
                "shipping_methods": ["kerry", "thailand_post"],
                "shipping_time": "1-2 ‡∏ß‡∏±‡∏ô",
                "condition": "new",
                "availability": True,
                "stock_quantity": 25
            },
            {
                "plant_id": 4,  # Philodendron Pink Princess
                "seller_id": 2,  # Green Paradise
                "base_price": 8500.0,
                "currency": "THB",
                "price_type": "negotiable",
                "height": 45.0,
                "width": 35.0,
                "pot_size": "4inch",
                "leaf_count": 6,
                "maturity_level": "baby",
                "quality_grade": QualityGrade.A,
                "variegation_level": VariegationLevel.HIGH,
                "health_score": 98.0,
                "seasonal_multiplier": 1.5,
                "peak_season": ["spring", "summer"],
                "off_season": ["winter"],
                "province": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà",
                "city": "‡πÄ‡∏°‡∏∑‡∏≠‡∏á",
                "local_market_factor": 0.9,
                "platform": "line_shop",
                "seller_type": "garden_center",
                "verification_status": "verified",
                "rating": 4.9,
                "review_count": 89,
                "shipping_cost": 200.0,
                "shipping_methods": ["ems", "kerry"],
                "shipping_time": "2-3 ‡∏ß‡∏±‡∏ô",
                "condition": "new",
                "availability": True,
                "stock_quantity": 8
            }
        ]
        
        for data in price_data:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            existing = db.query(PlantPriceDetailed).filter(
                PlantPriceDetailed.plant_id == data["plant_id"],
                PlantPriceDetailed.seller_id == data["seller_id"]
            ).first()
            
            if not existing:
                price_detailed = PlantPriceDetailed(**data)
                db.add(price_detailed)
        
        db.commit()
        print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        db.rollback()
    finally:
        db.close()

def add_seller_business_details():
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
    print("üè™ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î...")
    
    db = SessionLocal()
    try:
        # ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        sellers = db.query(Seller).all()
        if not sellers:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢")
            return
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
        business_data = [
            {
                "seller_id": 1,  # Plant Collector Thailand
                "registration_number": "0105560001234",
                "tax_id": "0123456789012",
                "business_license": "LIC-2024-001",
                "license_expiry": datetime(2026, 12, 31),
                "business_years": 8,
                "employee_count": 15,
                "annual_revenue": "5-10 ‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó",
                "business_hours": "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå 8:00-18:00",
                "production_capacity": "10,000 ‡∏ï‡πâ‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
                "quality_certifications": ["GAP", "Organic Thailand"],
                "organic_certified": True
            },
            {
                "seller_id": 2,  # Green Paradise
                "registration_number": "0205560005678",
                "tax_id": "0987654321098",
                "business_license": "LIC-2024-002",
                "license_expiry": datetime(2026, 6, 30),
                "business_years": 5,
                "employee_count": 8,
                "annual_revenue": "2-5 ‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó",
                "business_hours": "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå 9:00-17:00",
                "production_capacity": "3,000 ‡∏ï‡πâ‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
                "quality_certifications": ["GAP"],
                "organic_certified": False
            }
        ]
        
        for data in business_data:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            existing = db.query(SellerBusinessDetails).filter(
                SellerBusinessDetails.seller_id == data["seller_id"]
            ).first()
            
            if not existing:
                business_details = SellerBusinessDetails(**data)
                db.add(business_details)
        
        db.commit()
        print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        db.rollback()
    finally:
        db.close()

def add_seller_shipping_policies():
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á"""
    print("üöö ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á...")
    
    db = SessionLocal()
    try:
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
        shipping_policies = [
            {
                "seller_id": 1,  # Plant Collector Thailand
                "shipping_methods": ["kerry", "thailand_post", "ems"],
                "shipping_zones": [
                    {"zone": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø", "cost": 100, "delivery_time": "1-2 ‡∏ß‡∏±‡∏ô"},
                    {"zone": "‡∏õ‡∏£‡∏¥‡∏°‡∏ì‡∏ë‡∏•", "cost": 150, "delivery_time": "2-3 ‡∏ß‡∏±‡∏ô"},
                    {"zone": "‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", "cost": 200, "delivery_time": "3-5 ‡∏ß‡∏±‡∏ô"}
                ],
                "free_shipping_threshold": 3000.0,
                "packaging_fee": 50.0,
                "insurance_fee": 100.0,
                "processing_time": "1-2 ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£",
                "delivery_time": [
                    {"zone": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø", "time": "1-2 ‡∏ß‡∏±‡∏ô"},
                    {"zone": "‡∏õ‡∏£‡∏¥‡∏°‡∏ì‡∏ë‡∏•", "time": "2-3 ‡∏ß‡∏±‡∏ô"},
                    {"zone": "‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", "time": "3-5 ‡∏ß‡∏±‡∏ô"}
                ]
            },
            {
                "seller_id": 2,  # Green Paradise
                "shipping_methods": ["ems", "kerry"],
                "shipping_zones": [
                    {"zone": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", "cost": 80, "delivery_time": "1 ‡∏ß‡∏±‡∏ô"},
                    {"zone": "‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠", "cost": 150, "delivery_time": "2-3 ‡∏ß‡∏±‡∏ô"},
                    {"zone": "‡∏†‡∏≤‡∏Ñ‡∏≠‡∏∑‡πà‡∏ô‡πÜ", "cost": 250, "delivery_time": "3-5 ‡∏ß‡∏±‡∏ô"}
                ],
                "free_shipping_threshold": 5000.0,
                "packaging_fee": 80.0,
                "insurance_fee": 150.0,
                "processing_time": "2-3 ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£",
                "delivery_time": [
                    {"zone": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", "time": "1 ‡∏ß‡∏±‡∏ô"},
                    {"zone": "‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠", "time": "2-3 ‡∏ß‡∏±‡∏ô"},
                    {"zone": "‡∏†‡∏≤‡∏Ñ‡∏≠‡∏∑‡πà‡∏ô‡πÜ", "time": "3-5 ‡∏ß‡∏±‡∏ô"}
                ]
            }
        ]
        
        for data in shipping_policies:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            existing = db.query(SellerShippingPolicy).filter(
                SellerShippingPolicy.seller_id == data["seller_id"]
            ).first()
            
            if not existing:
                shipping_policy = SellerShippingPolicy(**data)
                db.add(shipping_policy)
        
        db.commit()
        print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        db.rollback()
    finally:
        db.close()

def add_seller_warranty_policies():
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô"""
    print("üõ°Ô∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô...")
    
    db = SessionLocal()
    try:
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô
        warranty_policies = [
            {
                "seller_id": 1,  # Plant Collector Thailand
                "warranty_period": 30,
                "warranty_coverage": ["health", "variegation", "size"],
                "warranty_conditions": "‡∏û‡∏∑‡∏ä‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á",
                "return_policy": "‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô‡∏´‡∏≤‡∏Å‡∏û‡∏∑‡∏ä‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢",
                "refund_policy": "‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏∑‡∏ä‡πÉ‡∏´‡∏°‡πà",
                "return_period": 7
            },
            {
                "seller_id": 2,  # Green Paradise
                "warranty_period": 14,
                "warranty_coverage": ["health"],
                "warranty_conditions": "‡∏û‡∏∑‡∏ä‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á",
                "return_policy": "‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 3 ‡∏ß‡∏±‡∏ô‡∏´‡∏≤‡∏Å‡∏û‡∏∑‡∏ä‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢",
                "refund_policy": "‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô 80% ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏∑‡∏ä‡πÉ‡∏´‡∏°‡πà",
                "return_period": 3
            }
        ]
        
        for data in warranty_policies:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            existing = db.query(SellerWarrantyPolicy).filter(
                SellerWarrantyPolicy.seller_id == data["seller_id"]
            ).first()
            
            if not existing:
                warranty_policy = SellerWarrantyPolicy(**data)
                db.add(warranty_policy)
        
        db.commit()
        print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        db.rollback()
    finally:
        db.close()

def add_seller_payment_policies():
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"""
    print("üí≥ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô...")
    
    db = SessionLocal()
    try:
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        payment_policies = [
            {
                "seller_id": 1,  # Plant Collector Thailand
                "payment_methods": ["cash", "bank_transfer", "credit_card", "promptpay"],
                "installment_available": True,
                "installment_terms": ["3 months", "6 months", "12 months"],
                "down_payment_percentage": 30.0,
                "bulk_discount": True,
                "bulk_discount_rates": [
                    {"quantity": 5, "discount": 10},
                    {"quantity": 10, "discount": 15},
                    {"quantity": 20, "discount": 20}
                ],
                "member_discount": True
            },
            {
                "seller_id": 2,  # Green Paradise
                "payment_methods": ["cash", "bank_transfer", "promptpay"],
                "installment_available": False,
                "bulk_discount": True,
                "bulk_discount_rates": [
                    {"quantity": 3, "discount": 5},
                    {"quantity": 5, "discount": 10}
                ],
                "member_discount": False
            }
        ]
        
        for data in payment_policies:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            existing = db.query(SellerPaymentPolicy).filter(
                SellerPaymentPolicy.seller_id == data["seller_id"]
            ).first()
            
            if not existing:
                payment_policy = SellerPaymentPolicy(**data)
                db.add(payment_policy)
        
        db.commit()
        print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        db.rollback()
    finally:
        db.close()

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ PlantDex - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
    print("=" * 50)
    
    try:
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡∏ä‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        add_plant_images()
        add_plant_propagations()
        add_plant_pest_diseases()
        add_plant_seasonal_infos()
        add_plant_shipping_infos()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        add_plant_prices_detailed()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        add_seller_business_details()
        add_seller_shipping_policies()
        add_seller_warranty_policies()
        add_seller_payment_policies()
        
        print("\nüéâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        print("\nüí° ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:")
        print("  1. ‡πÉ‡∏ä‡πâ ChatGPT ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡∏ä‡∏´‡∏≤‡∏¢‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
        print("  2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï frontend ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà")
        print("  3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å: {e}")

if __name__ == "__main__":
    main() 