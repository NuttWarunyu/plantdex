#!/usr/bin/env python3
"""
Import CSV Data to Database
‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
"""

import csv
import os
from datetime import datetime
from sqlalchemy.orm import Session
from app.core.database import SessionLocal
from app.models.plant import Plant
from app.models.plant_detailed import (
    PlantImage, PlantPropagation, PlantPestDisease, 
    PlantSeasonalInfo, PlantShippingInfo, PlantPriceDetailed
)
from app.models.user import Seller
from app.models.market import MarketTrend, PlantPriceIndex, TrendingPlant

def import_plants_from_csv(db: Session, csv_file: str):
    """‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡∏ä‡∏à‡∏≤‡∏Å CSV"""
    print(f"üå± ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡∏ä‡∏à‡∏≤‡∏Å {csv_file}...")
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ category ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö enum
    category_mapping = {
        'Aroid': 'TROPICAL',
        'Prayer Plant': 'TROPICAL',
        'Hoya': 'TROPICAL',
        'Caladium': 'TROPICAL',
        'Aglaonema': 'TROPICAL'
    }
    
    with open(csv_file, 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for row in reader:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏∑‡∏ä‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            existing_plant = db.query(Plant).filter(Plant.id == int(row['id'])).first()
            if existing_plant:
                print(f"  ‚ö†Ô∏è  ‡∏û‡∏∑‡∏ä ID {row['id']} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ")
                continue
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ category
            csv_category = row['category']
            mapped_category = category_mapping.get(csv_category, 'TROPICAL')
            print(f"  üîç ‡πÅ‡∏õ‡∏•‡∏á category: '{csv_category}' -> '{mapped_category}'")
                
            plant = Plant(
                id=int(row['id']),
                scientific_name=row['scientific_name'],
                common_name_th=row['common_name'],
                common_name_en=row['common_name'],
                category=mapped_category,
                care_level='moderate',  # default value
                origin_country='Thailand',  # default value
                description_th=row['notes'],
                description_en=row['notes'],
                care_instructions=f"‡πÅ‡∏™‡∏á: {row['light']}, ‡∏ô‡πâ‡∏≥: {row['water']}, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: {row['humidity']}, ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: {row['temp_min_c']}-{row['temp_max_c']}¬∞C, ‡∏î‡∏¥‡∏ô: {row['soil']}",
                water_needs=row['water'],
                light_needs=row['light'],
                humidity_needs=row['humidity'],
                temperature_min=float(row['temp_min_c']),
                temperature_max=float(row['temp_max_c']),
                growth_rate='moderate',  # default value
                max_height=100.0,  # default value
                max_width=50.0,  # default value
                is_poisonous=False,  # default value
                is_rare=int(row['rarity_score']) >= 7,
                is_trending=int(row['trending_score']) >= 7
            )
            db.add(plant)
            print(f"  ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡∏ä: {row['common_name']}")
    
    db.commit()
    print(f"  üéØ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏∑‡∏ä‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

def import_plant_images_from_csv(db: Session, csv_file: str):
    """‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏û‡∏∑‡∏ä‡∏à‡∏≤‡∏Å CSV"""
    print(f"üñºÔ∏è ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏û‡∏∑‡∏ä‡∏à‡∏≤‡∏Å {csv_file}...")
    
    with open(csv_file, 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for row in reader:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏∑‡∏ä‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            plant = db.query(Plant).filter(Plant.id == int(row['plant_id'])).first()
            if not plant:
                print(f"  ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏∑‡∏ä ID {row['plant_id']} ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ")
                continue
                
            image = PlantImage(
                plant_id=int(row['plant_id']),
                image_type=row['image_type'],
                image_url=row['image_url'],
                image_alt=row['image_alt'],
                image_order=int(row['image_order']),
                is_primary=row['is_primary'].lower() == 'true'
            )
            db.add(image)
            print(f"  ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {row['image_alt']}")
    
    db.commit()
    print(f"  üéØ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

def import_plant_propagations_from_csv(db: Session, csv_file: str):
    """‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏à‡∏≤‡∏Å CSV"""
    print(f"üå± ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏à‡∏≤‡∏Å {csv_file}...")
    
    with open(csv_file, 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for row in reader:
            plant = db.query(Plant).filter(Plant.id == int(row['plant_id'])).first()
            if not plant:
                print(f"  ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏∑‡∏ä ID {row['plant_id']} ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ")
                continue
                
            propagation = PlantPropagation(
                plant_id=int(row['plant_id']),
                method=row['method'],
                difficulty=row['difficulty'],
                success_rate=float(row['success_rate']) if row['success_rate'] else None,
                time_to_root=int(row['time_to_root']) if row['time_to_root'] else None,
                best_season=row['best_season'],
                instructions=row['instructions'],
                tools_needed=row['tools_needed']
            )
            db.add(propagation)
            print(f"  ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå: {row['method']} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡∏ä {row['plant_id']}")
    
    db.commit()
    print(f"  üéØ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

def import_plant_pest_diseases_from_csv(db: Session, csv_file: str):
    """‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡∏•‡∏á‡∏à‡∏≤‡∏Å CSV"""
    print(f"üêõ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡∏•‡∏á‡∏à‡∏≤‡∏Å {csv_file}...")
    
    with open(csv_file, 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for row in reader:
            plant = db.query(Plant).filter(Plant.id == int(row['plant_id'])).first()
            if not plant:
                print(f"  ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏∑‡∏ä ID {row['plant_id']} ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ")
                continue
                
            pest = PlantPestDisease(
                plant_id=int(row['plant_id']),
                pest_name=row['pest_name'],
                pest_type=row['pest_type'],
                symptoms=row['symptoms'],
                prevention_methods=row['prevention_methods'],
                treatment_methods=row['treatment_methods'],
                severity_level=row['severity_level'],
                risk_season=row['risk_season']
            )
            db.add(pest)
            print(f"  ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏£‡∏Ñ/‡πÅ‡∏°‡∏•‡∏á: {row['pest_name']} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡∏ä {row['plant_id']}")
    
    db.commit()
    print(f"  üéØ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡∏•‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

def import_plant_seasonal_infos_from_csv(db: Session, csv_file: str):
    """‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡∏à‡∏≤‡∏Å CSV"""
    print(f"üå∏ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡∏à‡∏≤‡∏Å {csv_file}...")
    
    with open(csv_file, 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for row in reader:
            plant = db.query(Plant).filter(Plant.id == int(row['plant_id'])).first()
            if not plant:
                print(f"  ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏∑‡∏ä ID {row['plant_id']} ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ")
                continue
                
            seasonal = PlantSeasonalInfo(
                plant_id=int(row['plant_id']),
                growing_season=row['growing_season'],
                flowering_season=row['flowering_season'],
                dormancy_season=row['dormancy_season'],
                seasonal_care_notes=row['seasonal_care_notes'],
                watering_frequency=row['watering_frequency'],
                fertilizing_schedule=row['fertilizing_schedule']
            )
            db.add(seasonal)
            print(f"  ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡∏ä {row['plant_id']}")
    
    db.commit()
    print(f"  üéØ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

def import_plant_shipping_infos_from_csv(db: Session, csv_file: str):
    """‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å CSV"""
    print(f"üì¶ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å {csv_file}...")
    
    with open(csv_file, 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for row in reader:
            plant = db.query(Plant).filter(Plant.id == int(row['plant_id'])).first()
            if not plant:
                print(f"  ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏∑‡∏ä ID {row['plant_id']} ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ")
                continue
                
            shipping = PlantShippingInfo(
                plant_id=int(row['plant_id']),
                fragility_level=row['fragility_level'],
                packaging_requirements=row['packaging_requirements'],
                max_distance_km=int(row['max_distance_km']) if row['max_distance_km'] else None,
                preparation_time_days=int(row['preparation_time_days']) if row['preparation_time_days'] else None,
                special_handling=row['special_handling']
            )
            db.add(shipping)
            print(f"  ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡∏ä {row['plant_id']}")
    
    db.commit()
    print(f"  üéØ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

def import_plant_prices_detailed_from_csv(db: Session, csv_file: str):
    """‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏à‡∏≤‡∏Å CSV"""
    print(f"üí∞ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏à‡∏≤‡∏Å {csv_file}...")
    
    with open(csv_file, 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for row in reader:
            plant = db.query(Plant).filter(Plant.id == int(row['plant_id'])).first()
            if not plant:
                print(f"  ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏∑‡∏ä ID {row['plant_id']} ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ")
                continue
                
            price = PlantPriceDetailed(
                plant_id=int(row['plant_id']),
                seller_id=int(row['seller_id']),
                base_price=float(row['base_price']),
                currency=row['currency'],
                price_type=row['price_type'],
                height=float(row['height']) if row['height'] else None,
                width=float(row['width']) if row['width'] else None,
                pot_size=row['pot_size'],
                leaf_count=int(row['leaf_count']) if row['leaf_count'] else None,
                maturity_level=row['maturity_level'],
                quality_grade=row['quality_grade'],
                variegation_level=row['variegation_level'],
                health_score=float(row['health_score']) if row['health_score'] else None,
                seasonal_multiplier=float(row['seasonal_multiplier']) if row['seasonal_multiplier'] else None,
                peak_season=row['peak_season'],
                off_season=row['off_season'],
                province=row['province'],
                city=row['city'],
                local_market_factor=float(row['local_market_factor']) if row['local_market_factor'] else None,
                platform=row['platform'],
                seller_type=row['seller_type'],
                verification_status=row['verification_status'],
                rating=float(row['rating']) if row['rating'] else None,
                review_count=int(row['review_count']) if row['review_count'] else None
            )
            db.add(price)
            print(f"  ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤: {row['base_price']} {row['currency']} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡∏ä {row['plant_id']}")
    
    db.commit()
    print(f"  üéØ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

def import_sellers_from_csv(db: Session, csv_file: str):
    """‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å CSV"""
    print(f"üè™ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å {csv_file}...")
    
    with open(csv_file, 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for row in reader:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            existing_seller = db.query(Seller).filter(Seller.id == int(row['seller_id'])).first()
            if existing_seller:
                print(f"  ‚ö†Ô∏è  ‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢ ID {row['seller_id']} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ")
                continue
                
            seller = Seller(
                id=int(row['seller_id']),
                name=row['seller_name'],
                seller_type=row['seller_type'],
                registration_number=row['registration_number'],
                tax_id=row['tax_id'],
                business_license=row['business_license'],
                license_expiry=datetime.strptime(row['license_expiry'], '%Y-%m-%d').date() if row['license_expiry'] != 'not_provided' else None,
                business_years=int(row['business_years']) if row['business_years'] else None,
                employee_count=row['employee_count'],
                annual_revenue=row['annual_revenue'],
                business_hours=row['business_hours'],
                production_capacity=row['production_capacity'],
                quality_certifications=row['quality_certifications'],
                organic_certified=row['organic_certified'].lower() == 'true',
                channels=row['channels'],
                location=row['province']
            )
            db.add(seller)
            print(f"  ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢: {row['seller_name']}")
    
    db.commit()
    print(f"  üéØ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV...")
    
    db = SessionLocal()
    try:
        # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
        import_plants_from_csv(db, 'plants.csv')
        import_sellers_from_csv(db, 'sellers.csv')
        import_plant_images_from_csv(db, 'plant_images.csv')
        import_plant_propagations_from_csv(db, 'plant_propagations.csv')
        import_plant_pest_diseases_from_csv(db, 'plant_pest_diseases.csv')
        import_plant_seasonal_infos_from_csv(db, 'plant_seasonal_infos.csv')
        import_plant_shipping_infos_from_csv(db, 'plant_shipping_infos.csv')
        import_plant_prices_detailed_from_csv(db, 'plant_prices_detailed.csv')
        
        print("\nüéâ ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    main() 