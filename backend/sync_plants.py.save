#!/usr/bin/env python3
"""
Sync Plants to Railway Database
"""

from app.core.database import SessionLocal
from app.models.plant import Plant, PlantCategory, CareLevel
import csv
import os

def sync_plants():
    print("üå± ‡πÄ‡∏£‡∏¥‡πà‡∏° sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡∏ä...")
    
    db = SessionLocal()
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        current_count = db.query(Plant).count()
        print(f"‡∏û‡∏∑‡∏ä‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_count} ‡∏ï‡πâ‡∏ô")
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ category ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö enum
        category_mapping = {
            'indoor': PlantCategory.INDOOR,
            'outdoor': PlantCategory.OUTDOOR,
            'tropical': PlantCategory.TROPICAL,
            'succulent': PlantCategory.SUCCULENT,
            'cactus': PlantCategory.CACTUS,
            'orchid': PlantCategory.ORCHID,
            'herb': PlantCategory.HERB,
            'tree': PlantCategory.TREE,
            'shrub': PlantCategory.SHRUB,
            'vine': PlantCategory.VINE,
            'garden': PlantCategory.GARDEN,
            'water': PlantCategory.WATER,
            'rock': PlantCategory.ROCK,
            'border': PlantCategory.BORDER,
            'other': PlantCategory.OTHER
        }
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ care_level ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö enum
        care_level_mapping = {
            'easy': CareLevel.EASY,
            'moderate': CareLevel.MODERATE,
            'difficult': CareLevel.DIFFICULT
        }
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ boolean
        def parse_boolean(value):
            if isinstance(value, str):
                return value.lower() in ['true', '1', 'yes', 'y']
            return bool(value)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ numeric
        def parse_float(value):
            try:
                return float(value) if value else 0.0
            except (ValueError, TypeError):
                return 0.0
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CSV
        csv_file = 'plant_data/plantdex_master_1-118.csv'
        
        if not os.path.exists(csv_file):
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {csv_file}")
            return
        
        with open(csv_file, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            plants_added = 0
            plants_skipped = 0
            
            for row in reader:
                try:
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏∑‡∏ä‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    existing_plant = db.query(Plant).filter(
                        Plant.scientific_name == row['scientific_name']
                    ).first()
                    
                    if existing_plant:
                        print(f"  ‚ö†Ô∏è  ‡∏û‡∏∑‡∏ä‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: {row['scientific_name']} ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ")
                        plants_skipped += 1
                        continue
                    
                    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ category
                    csv_category = row['catego#!/usr/bin/env python3
"""
Sync Plants to Railway Database
"""

from app.core.database import SessionLocal
from app.models.plant import Plant, PlantCategory, CareLevel
import csv
import os

def sync_plants():
    print("üå± ‡πÄ‡∏£‡∏¥‡πà‡∏° sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡∏ä...")
    
    db = SessionLocal()
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        current_count = db.query(Plant).count()
        print(f"‡∏û‡∏∑‡∏ä‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_count} ‡∏ï‡πâ‡∏ô")
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ category ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö enum
        category_mapping = {
            'indoor': PlantCategory.INDOOR,
            'outdoor': PlantCategory.OUTDOOR,
            'tropical': PlantCategory.TROPICAL,
            'succulent': PlantCategory.SUCCULENT,
            'cactus': PlantCategory.CACTUS,
            'orchid': PlantCategory.ORCHID,
            'herb': PlantCategory.HERB,
            'tree': PlantCategory.TREE,
            'shrub': PlantCategory.SHRUB,
            'vine': PlantCategory.VINE,
            'garden': PlantCategory.GARDEN,
            'water': PlantCategory.WATER,
            'rock': PlantCategory.ROCK,
            'border': PlantCategory.BORDER,
            'other': PlantCategory.OTHER
        }
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ care_level ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö enum
        care_level_mapping = {
            'easy': CareLevel.EASY,
            'moderate': CareLevel.MODERATE,
            'difficult': CareLevel.DIFFICULT
        }
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ boolean
        def parse_boolean(value):
            if isinstance(value, str):
                return value.lower() in ['true', '1', 'yes', 'y']
            return bool(value)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ numeric
        def parse_float(value):
            try:
                return float(value) if value else 0.0
            except (ValueError, TypeError):
                return 0.0
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CSV
        csv_file = 'plant_data/plantdex_master_1-118.csv'
        
        if not os.path.exists(csv_file):
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {csv_file}")
            return
        
        with open(csv_file, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            plants_added = 0
            plants_skipped = 0
            
            for row in reader:
                try:
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏∑‡∏ä‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    existing_plant = db.query(Plant).filter(
                        Plant.scientific_name == row['scientific_name']
                    ).first()
                    
                    if existing_plant:
                        print(f"  ‚ö†Ô∏è  ‡∏û‡∏∑‡∏ä‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: {row['scientific_name']} ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ")
                        plants_skipped += 1
                        continue
                    
                    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ category
                    csv_category = row['category'].lower()
                    mapped_category = category_mapping.get(csv_category, PlantCategory.OTHER)
                    
                    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ care_level
                    csv_care_level = row['care_level'].lower()
                    mapped_care_level = care_level_mapping.get(csv_care_level, CareLevel.MODERATE)
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡∏ä‡πÉ‡∏´‡∏°‡πà
                    plant = Plant(
                        scientific_name=row['scientific_name'],
                        common_name_th=row['common_name_th'],
                        common_name_en=row['common_name_en'],
                        category=mapped_category,
                        care_level=mapped_care_level,
                        origin_country=row['origin_country'],
                        description_th=row['description_th'],
                        description_en=row['description_en'],
                        care_instructions=row['care_instructions'],
                        water_needs=row['water_needs'],
                        light_needs=row['light_needs'],
                        humidity_needs=row['humidity_needs'],
                        temperature_min=parse_float(row['temperature_min']),
                        temperature_max=parse_float(row['temperature_max']),
                        growth_rate=row['growth_rate'],
                        max_height=parse_float(row['max_height']),
                        max_width=parse_float(row['max_width']),
                        is_poisonous=parse_boolean(row['is_poisonous']),
                        is_rare=parse_boolean(row['is_rare']),
                        is_trending=parse_boolean(row['is_trending'])
                    )
                    
                    db.add(plant)
                    plants_added += 1
                    print(f"  ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡∏ä: {row['common_name_th']} ({row['scientific_name']})")
                    
                except Exception as e:
                    print(f"  ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö‡∏û‡∏∑‡∏ä: {row.get('scientific_name', 'Unknown')} - {e}")
                    continue
            
            try:
                db.commit()
                print(f"\nÔøΩÔøΩ Sync ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
                print(f"  ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡∏ä‡πÉ‡∏´‡∏°‡πà: {plants_added} ‡∏ï‡πâ‡∏ô")
                print(f"  ‚ö†Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏°‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: {plants_skipped} ‡∏ï‡πâ‡∏ô")
                print(f"  ÔøΩÔøΩ ‡∏£‡∏ß‡∏°‡∏û‡∏∑‡∏ä‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {db.query(Plant).count()} ‡∏ï‡πâ‡∏ô")
            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ commit: {e}")
                db.rollback()
                
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    sync_plants()
